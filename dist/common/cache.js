"use strict";
/*
 * @Author: he@whaleblue.design
 * @Date: 2018-03-05 22:01:41
 * @Last Modified by: Mr.He
 * @Last Modified time: 2018-07-17 22:21:47
 * @content what is the content of this file. */
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const redis_1 = require("redis");
class Cache {
    constructor() {
        this._client = null;
    }
    init(conn_url) {
        this._client = redis_1.createClient(conn_url);
    }
    read(id) {
        return new Promise((resolve, reject) => {
            this._client.get(id, (err, result) => {
                if (err) {
                    reject(err);
                }
                try {
                    result = JSON.parse(result);
                }
                catch (e) {
                }
                finally {
                    resolve(result);
                }
            });
        });
    }
    write(id, content, ex) {
        if (typeof content == "object") {
            content = JSON.stringify(content);
        }
        return new Promise((resolve, reject) => {
            if (ex) {
                this._client.set(id, content, 'EX', ex, (err, result) => {
                    if (err) {
                        reject(err);
                    }
                    resolve(result);
                });
            }
            else {
                this._client.set(id, content, (err, result) => {
                    if (err) {
                        reject(err);
                    }
                    resolve(result);
                });
            }
        });
    }
    del(id) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return yield this._client.del(id);
        });
    }
}
exports.Cache = Cache;
let cache = new Cache();
exports.default = cache;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FjaGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9jb21tb24vY2FjaGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7OztnREFLZ0Q7OztBQUVoRCxpQ0FBa0Q7QUFFbEQ7SUFHSTtRQUNJLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDO0lBQ3hCLENBQUM7SUFFRCxJQUFJLENBQUMsUUFBZ0I7UUFDakIsSUFBSSxDQUFDLE9BQU8sR0FBRyxvQkFBWSxDQUFDLFFBQVEsQ0FBZ0IsQ0FBQztJQUN6RCxDQUFDO0lBRUQsSUFBSSxDQUFDLEVBQVU7UUFDWCxNQUFNLENBQUMsSUFBSSxPQUFPLENBQUMsQ0FBQyxPQUFPLEVBQUUsTUFBTTtZQUMvQixJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxHQUFVLEVBQUUsTUFBVztnQkFDekMsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztvQkFDTixNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7Z0JBQ2hCLENBQUM7Z0JBRUQsSUFBSSxDQUFDO29CQUNELE1BQU0sR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDO2dCQUNoQyxDQUFDO2dCQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBRWIsQ0FBQzt3QkFBUyxDQUFDO29CQUNQLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztnQkFDcEIsQ0FBQztZQUNMLENBQUMsQ0FBQyxDQUFBO1FBQ04sQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDO0lBRUQsS0FBSyxDQUFDLEVBQVUsRUFBRSxPQUFZLEVBQUUsRUFBVztRQUN2QyxFQUFFLENBQUMsQ0FBQyxPQUFPLE9BQU8sSUFBSSxRQUFRLENBQUMsQ0FBQyxDQUFDO1lBQzdCLE9BQU8sR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ3RDLENBQUM7UUFFRCxNQUFNLENBQUMsSUFBSSxPQUFPLENBQUMsQ0FBQyxPQUFPLEVBQUUsTUFBTTtZQUMvQixFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO2dCQUNMLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEVBQUUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLEVBQUUsRUFBRSxDQUFDLEdBQVUsRUFBRSxNQUFXO29CQUM1RCxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO3dCQUNOLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztvQkFDaEIsQ0FBQztvQkFFRCxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7Z0JBQ3BCLENBQUMsQ0FBQyxDQUFDO1lBQ1AsQ0FBQztZQUFDLElBQUksQ0FBQyxDQUFDO2dCQUNKLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEVBQUUsRUFBRSxPQUFPLEVBQUUsQ0FBQyxHQUFVLEVBQUUsTUFBVztvQkFDbEQsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQzt3QkFDTixNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7b0JBQ2hCLENBQUM7b0JBRUQsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO2dCQUNwQixDQUFDLENBQUMsQ0FBQztZQUNQLENBQUM7UUFDTCxDQUFDLENBQUMsQ0FBQTtJQUNOLENBQUM7SUFFSyxHQUFHLENBQUMsRUFBVTs7WUFDaEIsTUFBTSxDQUFDLE1BQU0sSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDdEMsQ0FBQztLQUFBO0NBQ0o7QUExREQsc0JBMERDO0FBRUQsSUFBSSxLQUFLLEdBQUcsSUFBSSxLQUFLLEVBQUUsQ0FBQztBQUN4QixrQkFBZSxLQUFLLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQEF1dGhvcjogaGVAd2hhbGVibHVlLmRlc2lnblxuICogQERhdGU6IDIwMTgtMDMtMDUgMjI6MDE6NDFcbiAqIEBMYXN0IE1vZGlmaWVkIGJ5OiBNci5IZVxuICogQExhc3QgTW9kaWZpZWQgdGltZTogMjAxOC0wNy0xNyAyMjoyMTo0N1xuICogQGNvbnRlbnQgd2hhdCBpcyB0aGUgY29udGVudCBvZiB0aGlzIGZpbGUuICovXG5cbmltcG9ydCB7IGNyZWF0ZUNsaWVudCwgUmVkaXNDbGllbnQgfSBmcm9tIFwicmVkaXNcIjtcblxuZXhwb3J0IGNsYXNzIENhY2hlIHtcbiAgICBwcml2YXRlIF9jbGllbnQ6IGFueTtcblxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLl9jbGllbnQgPSBudWxsO1xuICAgIH1cblxuICAgIGluaXQoY29ubl91cmw6IHN0cmluZykge1xuICAgICAgICB0aGlzLl9jbGllbnQgPSBjcmVhdGVDbGllbnQoY29ubl91cmwpIGFzIFJlZGlzQ2xpZW50O1xuICAgIH1cblxuICAgIHJlYWQoaWQ6IHN0cmluZyk6IFByb21pc2U8YW55PiB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICB0aGlzLl9jbGllbnQuZ2V0KGlkLCAoZXJyOiBFcnJvciwgcmVzdWx0OiBhbnkpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IEpTT04ucGFyc2UocmVzdWx0KTtcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XG5cbiAgICAgICAgICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHJlc3VsdCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgd3JpdGUoaWQ6IHN0cmluZywgY29udGVudDogYW55LCBleD86IG51bWJlcik6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgICAgIGlmICh0eXBlb2YgY29udGVudCA9PSBcIm9iamVjdFwiKSB7XG4gICAgICAgICAgICBjb250ZW50ID0gSlNPTi5zdHJpbmdpZnkoY29udGVudCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgaWYgKGV4KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fY2xpZW50LnNldChpZCwgY29udGVudCwgJ0VYJywgZXgsIChlcnI6IEVycm9yLCByZXN1bHQ6IGFueSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUocmVzdWx0KTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fY2xpZW50LnNldChpZCwgY29udGVudCwgKGVycjogRXJyb3IsIHJlc3VsdDogYW55KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShyZXN1bHQpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KVxuICAgIH1cblxuICAgIGFzeW5jIGRlbChpZDogc3RyaW5nKTogUHJvbWlzZTxhbnk+IHtcbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuX2NsaWVudC5kZWwoaWQpO1xuICAgIH1cbn1cblxubGV0IGNhY2hlID0gbmV3IENhY2hlKCk7XG5leHBvcnQgZGVmYXVsdCBjYWNoZTtcbiJdfQ==