"use strict";
/*
 * @Author: he@whaleblue.design
 * @Date: 2018-07-14 22:46:40
 * @Last Modified by: Mr.He
 * @Last Modified time: 2018-07-17 22:27:33
 * @content what is the content of this file. */
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const config_1 = require("config/config");
const db_1 = require("common/db");
const cache_1 = require("common/cache");
const _ = require("lodash");
/* init DB, import table models. */
db_1.init(config_1.config.mysql.url, config_1.config.mysql.debug);
require("sqlModel/index");
db_1.DB.sync({ force: false });
/* inject redis server. */
cache_1.default.init(config_1.config.redis.url);
const http_1 = require("../http");
const superkoa = require('superkoa');
const bootup = superkoa(http_1.default);
const HTTP_OK = 200;
const HTTP_ERR = 500;
const assert = require("assert");
describe('#the image captcha test', function () {
    let codeIdBody, codeIdData;
    before((() => tslib_1.__awaiter(this, void 0, void 0, function* () {
        let result = yield bootup.get("/api/v1/captchaid").expect(HTTP_OK);
        codeIdBody = result.body;
        codeIdData = codeIdBody.data;
    })));
    it("get the code ID", (done) => {
        assert.equal(codeIdBody.code, 0);
        assert.ok(codeIdData.codeId);
        done();
    });
    it("get the captcha picture", () => tslib_1.__awaiter(this, void 0, void 0, function* () {
        let result = yield bootup.get("/api/v1/captchaimg/" + codeIdData.codeId).expect(HTTP_OK);
        assert.equal(result.headers["content-type"], "image/gif");
    }));
});
describe('#post user', function () {
    let codeId, code, data;
    before((() => tslib_1.__awaiter(this, void 0, void 0, function* () {
        let result = yield bootup.get("/api/v1/captchaid").expect(HTTP_OK);
        codeId = result.body.data.codeId;
        let imgresult = yield bootup.get("/api/v1/captchaimg/" + codeId).expect(HTTP_OK);
        assert.equal(imgresult.headers["content-type"], "image/gif");
        let redisCache = yield cache_1.default.read(codeId);
        code = redisCache.code;
        data = {
            "email": Math.random() + "abc123@163.com",
            "address": ["dfdf", "dfdfdf", "dfdfdfjdljc", "aa", "b"],
            "twtterName": "ddf",
            "radditName": "dfdf",
            "facebookName": "ok",
            "firstName": "o122",
            "lastName": "last",
            "country": "country12",
            "code": code,
            "codeId": codeId,
            "checkMarketing": 1
        };
    })));
    it("the params require check", () => tslib_1.__awaiter(this, void 0, void 0, function* () {
        let theData = _.cloneDeep(data);
        delete theData.twtterName;
        let result = yield bootup.post("/api/v1/users")
            .send(theData)
            .expect(HTTP_OK);
        assert.notEqual(result.body.code, 0);
    }));
    it("the params address check", () => tslib_1.__awaiter(this, void 0, void 0, function* () {
        let theData = _.cloneDeep(data);
        theData.address = [];
        let result = yield bootup.post("/api/v1/users")
            .send(theData)
            .expect(HTTP_OK);
        assert.notEqual(result.body.code, 0);
        theData.address = ["1", "2", "3", "4", "5", "6"];
        let result2 = yield bootup.post("/api/v1/users")
            .send(theData)
            .expect(HTTP_OK);
        assert.notEqual(result.body.code, 0);
    }));
    it("the user create success", () => tslib_1.__awaiter(this, void 0, void 0, function* () {
        let result = yield bootup.post("/api/v1/users")
            .send(data)
            .expect(HTTP_OK);
        assert.equal(result.body.code, 0);
    }));
    it("the same code can't be post again.", () => tslib_1.__awaiter(this, void 0, void 0, function* () {
        data.email = "dfdfdfdfdfdfdfdf@qq.com";
        let result = yield bootup.post("/api/v1/users")
            .send(data)
            .expect(HTTP_OK);
        assert.notEqual(result.body.code, 0);
    }));
});
//# sourceMappingURL=data:application/json;base64,