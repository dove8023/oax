"use strict";
/*
 * @Author: he@whaleblue.design
 * @Date: 2018-03-22 16:20:52
 * @Last Modified by: Mr.He
 * @Last Modified time: 2018-07-17 22:22:37
 * @content what is the content of this file. */
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const Koa = require("koa");
const koaBody = require("koa-body");
const moment = require("moment");
const middleware_1 = require("middleware");
const cors = require("koa2-cors");
const bouncer = require("koa-bouncer");
let app = new Koa();
app.use((ctx, next) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    try {
        //default type json.
        ctx.response.type = "json";
        yield next();
    }
    catch (err) {
        ctx.response.status = err.status || err.statusCode || 500;
        ctx.response.type = "text";
        ctx.response.body = err.message || err;
        console.error(err);
    }
}));
app.use(koaBody({
    jsonLimit: '8mb'
}));
// x-response-time
app.use((ctx, next) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    const start = Date.now();
    yield next();
    const ms = Date.now() - start;
    ctx.set('X-Response-Time', `${ms}ms`);
}));
// logger
app.use((ctx, next) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    const start = Date.now();
    yield next();
    const ms = Date.now() - start;
    console.log(`${moment().format()} ${ctx.method} ${ctx.url} ${ctx.status}--- ${ms}ms`);
}));
app.use(bouncer.middleware());
app.use(middleware_1.response);
app.use(cors({
    origin: "*",
    exposeHeaders: ['WWW-Authenticate', 'Server-Authorization'],
    maxAge: 5,
    credentials: true,
    allowMethods: ['GET', 'POST', 'DELETE', 'PUT', 'OPTIONS'],
    allowHeaders: ['Content-Type', 'Authorization', 'Accept', 'token'],
}));
app.use((ctx, next) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    if (ctx.method == "OPTIONS") {
        console.log("options");
        return ctx.success("ok");
    }
    else {
        return yield next();
    }
}));
const src_1 = require("../src");
app.use(src_1.default.routes());
exports.default = app;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9odHRwL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7Ozs7Z0RBS2dEOzs7QUFFaEQsMkJBQTJCO0FBQzNCLG9DQUFxQztBQUNyQyxpQ0FBaUM7QUFDakMsMkNBQXNDO0FBQ3RDLGtDQUFrQztBQUNsQyxNQUFNLE9BQU8sR0FBRyxPQUFPLENBQUMsYUFBYSxDQUFDLENBQUM7QUFDdkMsSUFBSSxHQUFHLEdBQUcsSUFBSSxHQUFHLEVBQUUsQ0FBQztBQUVwQixHQUFHLENBQUMsR0FBRyxDQUFDLENBQU8sR0FBZ0IsRUFBRSxJQUFjO0lBQzNDLElBQUksQ0FBQztRQUNELG9CQUFvQjtRQUNwQixHQUFHLENBQUMsUUFBUSxDQUFDLElBQUksR0FBRyxNQUFNLENBQUM7UUFDM0IsTUFBTSxJQUFJLEVBQUUsQ0FBQztJQUNqQixDQUFDO0lBQUMsS0FBSyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUNYLEdBQUcsQ0FBQyxRQUFRLENBQUMsTUFBTSxHQUFHLEdBQUcsQ0FBQyxNQUFNLElBQUksR0FBRyxDQUFDLFVBQVUsSUFBSSxHQUFHLENBQUM7UUFDMUQsR0FBRyxDQUFDLFFBQVEsQ0FBQyxJQUFJLEdBQUcsTUFBTSxDQUFDO1FBQzNCLEdBQUcsQ0FBQyxRQUFRLENBQUMsSUFBSSxHQUFHLEdBQUcsQ0FBQyxPQUFPLElBQUksR0FBRyxDQUFDO1FBQ3ZDLE9BQU8sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDdkIsQ0FBQztBQUNMLENBQUMsQ0FBQSxDQUFDLENBQUM7QUFFSCxHQUFHLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQztJQUNaLFNBQVMsRUFBRSxLQUFLO0NBQ25CLENBQUMsQ0FBQyxDQUFDO0FBRUosa0JBQWtCO0FBQ2xCLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBTyxHQUFnQixFQUFFLElBQWM7SUFDM0MsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO0lBQ3pCLE1BQU0sSUFBSSxFQUFFLENBQUM7SUFDYixNQUFNLEVBQUUsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLEdBQUcsS0FBSyxDQUFDO0lBQzlCLEdBQUcsQ0FBQyxHQUFHLENBQUMsaUJBQWlCLEVBQUUsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFDO0FBQzFDLENBQUMsQ0FBQSxDQUFDLENBQUM7QUFFSCxTQUFTO0FBQ1QsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFPLEdBQWdCLEVBQUUsSUFBYztJQUMzQyxNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDekIsTUFBTSxJQUFJLEVBQUUsQ0FBQztJQUNiLE1BQU0sRUFBRSxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsR0FBRyxLQUFLLENBQUM7SUFDOUIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLE1BQU0sRUFBRSxDQUFDLE1BQU0sRUFBRSxJQUFJLEdBQUcsQ0FBQyxNQUFNLElBQUksR0FBRyxDQUFDLEdBQUcsSUFBSSxHQUFHLENBQUMsTUFBTSxPQUFPLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFDMUYsQ0FBQyxDQUFBLENBQUMsQ0FBQztBQUdILEdBQUcsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLFVBQVUsRUFBRSxDQUFDLENBQUM7QUFFOUIsR0FBRyxDQUFDLEdBQUcsQ0FBQyxxQkFBUSxDQUFDLENBQUM7QUFFbEIsR0FBRyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUM7SUFDVCxNQUFNLEVBQUUsR0FBRztJQUNYLGFBQWEsRUFBRSxDQUFDLGtCQUFrQixFQUFFLHNCQUFzQixDQUFDO0lBQzNELE1BQU0sRUFBRSxDQUFDO0lBQ1QsV0FBVyxFQUFFLElBQUk7SUFDakIsWUFBWSxFQUFFLENBQUMsS0FBSyxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUUsS0FBSyxFQUFFLFNBQVMsQ0FBQztJQUN6RCxZQUFZLEVBQUUsQ0FBQyxjQUFjLEVBQUUsZUFBZSxFQUFFLFFBQVEsRUFBRSxPQUFPLENBQUM7Q0FDckUsQ0FBQyxDQUFDLENBQUE7QUFDSCxHQUFHLENBQUMsR0FBRyxDQUFDLENBQU8sR0FBRyxFQUFFLElBQUk7SUFDcEIsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLE1BQU0sSUFBSSxTQUFTLENBQUMsQ0FBQyxDQUFDO1FBQzFCLE9BQU8sQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUE7UUFDdEIsTUFBTSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUE7SUFDNUIsQ0FBQztJQUFDLElBQUksQ0FBQyxDQUFDO1FBQ0osTUFBTSxDQUFDLE1BQU0sSUFBSSxFQUFFLENBQUM7SUFDeEIsQ0FBQztBQUNMLENBQUMsQ0FBQSxDQUFDLENBQUE7QUFFRixnQ0FBNEI7QUFFNUIsR0FBRyxDQUFDLEdBQUcsQ0FBQyxhQUFNLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQztBQUV6QixrQkFBZSxHQUFHLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQEF1dGhvcjogaGVAd2hhbGVibHVlLmRlc2lnblxuICogQERhdGU6IDIwMTgtMDMtMjIgMTY6MjA6NTJcbiAqIEBMYXN0IE1vZGlmaWVkIGJ5OiBNci5IZVxuICogQExhc3QgTW9kaWZpZWQgdGltZTogMjAxOC0wNy0xNyAyMjoyMjozN1xuICogQGNvbnRlbnQgd2hhdCBpcyB0aGUgY29udGVudCBvZiB0aGlzIGZpbGUuICovXG5cbmltcG9ydCAqIGFzIEtvYSBmcm9tIFwia29hXCI7XG5pbXBvcnQga29hQm9keSA9IHJlcXVpcmUoXCJrb2EtYm9keVwiKTtcbmltcG9ydCAqIGFzIG1vbWVudCBmcm9tIFwibW9tZW50XCI7XG5pbXBvcnQgeyByZXNwb25zZSB9IGZyb20gXCJtaWRkbGV3YXJlXCI7XG5pbXBvcnQgKiBhcyBjb3JzIGZyb20gXCJrb2EyLWNvcnNcIjtcbmNvbnN0IGJvdW5jZXIgPSByZXF1aXJlKFwia29hLWJvdW5jZXJcIik7XG5sZXQgYXBwID0gbmV3IEtvYSgpO1xuXG5hcHAudXNlKGFzeW5jIChjdHg6IEtvYS5Db250ZXh0LCBuZXh0OiBGdW5jdGlvbikgPT4ge1xuICAgIHRyeSB7XG4gICAgICAgIC8vZGVmYXVsdCB0eXBlIGpzb24uXG4gICAgICAgIGN0eC5yZXNwb25zZS50eXBlID0gXCJqc29uXCI7XG4gICAgICAgIGF3YWl0IG5leHQoKTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgY3R4LnJlc3BvbnNlLnN0YXR1cyA9IGVyci5zdGF0dXMgfHwgZXJyLnN0YXR1c0NvZGUgfHwgNTAwO1xuICAgICAgICBjdHgucmVzcG9uc2UudHlwZSA9IFwidGV4dFwiO1xuICAgICAgICBjdHgucmVzcG9uc2UuYm9keSA9IGVyci5tZXNzYWdlIHx8IGVycjtcbiAgICAgICAgY29uc29sZS5lcnJvcihlcnIpO1xuICAgIH1cbn0pO1xuXG5hcHAudXNlKGtvYUJvZHkoe1xuICAgIGpzb25MaW1pdDogJzhtYidcbn0pKTtcblxuLy8geC1yZXNwb25zZS10aW1lXG5hcHAudXNlKGFzeW5jIChjdHg6IEtvYS5Db250ZXh0LCBuZXh0OiBGdW5jdGlvbikgPT4ge1xuICAgIGNvbnN0IHN0YXJ0ID0gRGF0ZS5ub3coKTtcbiAgICBhd2FpdCBuZXh0KCk7XG4gICAgY29uc3QgbXMgPSBEYXRlLm5vdygpIC0gc3RhcnQ7XG4gICAgY3R4LnNldCgnWC1SZXNwb25zZS1UaW1lJywgYCR7bXN9bXNgKTtcbn0pO1xuXG4vLyBsb2dnZXJcbmFwcC51c2UoYXN5bmMgKGN0eDogS29hLkNvbnRleHQsIG5leHQ6IEZ1bmN0aW9uKSA9PiB7XG4gICAgY29uc3Qgc3RhcnQgPSBEYXRlLm5vdygpO1xuICAgIGF3YWl0IG5leHQoKTtcbiAgICBjb25zdCBtcyA9IERhdGUubm93KCkgLSBzdGFydDtcbiAgICBjb25zb2xlLmxvZyhgJHttb21lbnQoKS5mb3JtYXQoKX0gJHtjdHgubWV0aG9kfSAke2N0eC51cmx9ICR7Y3R4LnN0YXR1c30tLS0gJHttc31tc2ApO1xufSk7XG5cblxuYXBwLnVzZShib3VuY2VyLm1pZGRsZXdhcmUoKSk7XG5cbmFwcC51c2UocmVzcG9uc2UpO1xuXG5hcHAudXNlKGNvcnMoe1xuICAgIG9yaWdpbjogXCIqXCIsXG4gICAgZXhwb3NlSGVhZGVyczogWydXV1ctQXV0aGVudGljYXRlJywgJ1NlcnZlci1BdXRob3JpemF0aW9uJ10sXG4gICAgbWF4QWdlOiA1LFxuICAgIGNyZWRlbnRpYWxzOiB0cnVlLFxuICAgIGFsbG93TWV0aG9kczogWydHRVQnLCAnUE9TVCcsICdERUxFVEUnLCAnUFVUJywgJ09QVElPTlMnXSxcbiAgICBhbGxvd0hlYWRlcnM6IFsnQ29udGVudC1UeXBlJywgJ0F1dGhvcml6YXRpb24nLCAnQWNjZXB0JywgJ3Rva2VuJ10sXG59KSlcbmFwcC51c2UoYXN5bmMgKGN0eCwgbmV4dCkgPT4ge1xuICAgIGlmIChjdHgubWV0aG9kID09IFwiT1BUSU9OU1wiKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwib3B0aW9uc1wiKVxuICAgICAgICByZXR1cm4gY3R4LnN1Y2Nlc3MoXCJva1wiKVxuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBhd2FpdCBuZXh0KCk7XG4gICAgfVxufSlcblxuaW1wb3J0IHJvdXRlciBmcm9tIFwiLi4vc3JjXCI7XG5cbmFwcC51c2Uocm91dGVyLnJvdXRlcygpKTtcblxuZXhwb3J0IGRlZmF1bHQgYXBwO1xuIl19